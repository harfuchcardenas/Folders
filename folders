#!/usr/bin/perl

use strict; # Enforce stricter parsing and error checking
use warnings; # Enable warnings for potential problems
use Cwd 'abs_path'; # Import abs_path function from Cwd module for absolute path
use File::Spec; # Import File::Spec for path manipulation (e.g., building full paths)
use File::Basename; # Import basename function for extracting file/directory names

# ANSI escape codes for text colors and styles
# \e[34m sets foreground color to blue
# \e[1m sets text to bold
# \e[0m resets all attributes (color, bold, etc.) to default
use constant {
    COLOR_BLUE  => "\e[34m",
    COLOR_BOLD  => "\e[1m",
    COLOR_RESET => "\e[0m",
};

# Determine the target directory path.
# If an argument is provided, use it; otherwise, default to the current directory ('.').
my $directory_input;
if (@ARGV) {
    $directory_input = $ARGV[0];
} else {
    $directory_input = '.';
}

# Resolve the absolute path to handle relative paths like '.' or '..'.
# This makes the path unambiguous and ensures operations work reliably.
my $abs_directory_path = eval { abs_path($directory_input) };

# Validate that the resolved path exists and is indeed a directory.
# If not, print an appropriate error message and exit.
unless (defined $abs_directory_path && -d $abs_directory_path) {
    if (defined $abs_directory_path) {
        # Path exists but is not a directory (e.g., it's a file)
        print "Error: The path '$abs_directory_path' exists but is not a directory.\n";
    } else {
        # Path could not be resolved or does not exist (e.g., misspelled, non-existent)
        print "Error: The specified path '$directory_input' is invalid or does not exist.\n";
    }
    exit 1; # Exit with a non-zero status to indicate an error
}

my @subdirectories_with_times;

# Clear screen.
system('clear');

# Open the target directory for reading.
opendir(my $dh, $abs_directory_path) or die "Cannot open directory '$abs_directory_path': $!";

# Read each entry in the directory.
while (my $entry = readdir $dh) {
    # Skip '.' (current directory) and '..' (parent directory) entries.
    next if ($entry eq '.' || $entry eq '..');

    # Construct the full path to the entry.
    my $full_entry_path = File::Spec->catfile($abs_directory_path, $entry);

    # Check if the entry is a directory.
    if (-d $full_entry_path) {
        # Get modification time in seconds since epoch.
        my $mtime = (stat $full_entry_path)[9]; # stat returns a list, index 9 is mtime
        push @subdirectories_with_times, { path => $full_entry_path, mtime => $mtime };
    }
}

# Close the directory handle.
closedir $dh;

# Sort the directories by modification time in ascending order (oldest first)
# This is the reverse of ls -lA --sort=time -r
my @sorted_subdirectories = sort { $a->{mtime} <=> $b->{mtime} } @subdirectories_with_times;

# Print the found subdirectories.
if (@sorted_subdirectories) {
    foreach my $dir_info (@sorted_subdirectories) {
        # Extract just the directory name from the full path using basename()
        my $dir_name = basename($dir_info->{path});
        # Print only the directory name, enclosed in quotes for clarity, and with color
        print COLOR_BOLD . COLOR_BLUE . "'$dir_name'" . COLOR_RESET . "\n";
    }
} else {
    print "No subdirectories found in '$abs_directory_path'.\n";
}

exit 0; # Exit successfully
